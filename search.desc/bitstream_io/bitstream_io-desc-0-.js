searchState.loadedDescShard("bitstream_io", 0, "Traits and helpers for bitstream handling functionality\nBig-endian, or most significant bits first\nSize of type in bits\nBig-endian, or most significant bits first\nA queue for efficiently pushing bits onto a value and …\nThe raw byte representation of this numeric type\nA stream’s endianness, or byte order, for determining …\nLittle-endian, or least significant bits first\nLittle-endian, or least significant bits first\nThis trait extends many common integer types (both …\nThe value of 1 in this type\nA trait intended for simple fixed-length primitives (such …\nThis trait extends many common signed integer types so …\nReturns true if all bits remaining in the queue are 0\nReturns true if all bits remaining in the queue are 1\nGiven a two-complement positive value and certain number …\nGiven a two-complement positive value and certain number …\nGiven a negative value and a certain number of bits, …\nGiven a negative value and a certain number of bits, …\nAn empty buffer of this type’s size\nDrops all values in the queue\nCounts the number of 1 bits\nDrops the given number of bits from an accumulator with …\nDrops the given number of bits from the head of the queue …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert big-endian bytes to our value\nConvert little-endian bytes to our value\nReturns a <code>u8</code> value in this type\nCreates a new queue from the given value with the given …\nTraits and implementations for reading or writing Huffman …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the queue is empty\nReturns true if the queue is full\nReturns true if this value is negative\nReturns true if this value is 0, in its type\nCounts the number of leading zeros\nReturns the total bits in the queue\nReturns the maximum bits the queue can hold\nReturns a new empty queue\nReturns the next number of 1 bits from an accumulator with …\nReturns the next number of 0 bits from an accumulator with …\nPops a value with the given number of bits from an …\nPops a value with the given number of bits from the head …\nPops all 0 bits up to and including the next 1 bit and …\nPops all 1 bits up to and including the next 0 bit and …\nPops all the current bits from the queue and resets it to …\nPops a value with the given number of constant bits from …\nPops a value with the given number of bits from the head …\nPushes the given bits and value onto an accumulator with …\nPushes a value with the given number of bits onto the tail …\nPushes the given constant number of bits and value onto an …\nPushes a value with the given number of bits onto the tail …\nTraits and implementations for reading bits from a stream.\nReads entire numeric value from reader in this endianness\nReads convertable numeric value from reader in this …\nReads signed value from reader in this endianness\nReads signed value from reader in this endianness\nReturns the remaining bits the queue can hold\nSets the queue to a given value with the given number of …\nConverts to a generic signed value for stream recording …\nOur value in big-endian bytes\nOur value in little-endian bytes\nReturns the state of the queue as a single value which can …\nAssuming 0 &lt;= value &lt; 256, returns this value as a <code>u8</code> type\nCounts the number of trailing zeros\nConvert to a generic unsigned write value for stream …\nConsumes the queue and returns its current value\nTraits and implementations for writing bits to a stream.\nWrites entire numeric value to writer in this endianness\nWrites convertable numeric value to writer in this …\nWrites signed value to writer in this endianness\nWrites signed value to writer in this endianness\nAnother byte is necessary to determine final value\nThe final value and new reader state\nThe same Huffman code specifies multiple symbols\nAn error type during Huffman tree compilation.\nOne of the bits in a Huffman code is not 0 or 1\nAn invalid reader state has been used\nA Huffman code in the specification has no defined symbol\nA Huffman code is the prefix of some longer code\nA compiled Huffman tree element for use with the …\nA compiled Huffman tree for use with the <code>write_huffman</code> …\nGiven a vector of symbol/code pairs, compiles a Huffman …\nGiven a vector of symbol/code pairs, compiles a Huffman …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven symbol, returns iterator of (bits, value) pairs for …\nReturns true if symbol is in tree.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA trait for anything that can read a variable number of …\nFor reading non-aligned bits from a stream of bytes in a …\nA trait for anything that can read aligned values from an …\nFor reading aligned bytes from a stream of bytes in a …\nSome context to use when parsing\nSome context to use when parsing\nError generated during parsing, such as <code>io::Error</code>\nError generated during parsing, such as <code>io::Error</code>\nError generated during parsing, such as <code>io::Error</code>\nError generated during parsing, such as <code>io::Error</code>\nImplemented by complex types that don’t require any …\nImplemented by complex types that require some immutable …\nImplemented by complex types that don’t require any …\nImplemented by complex types that require some additional …\nA trait for anything that can read Huffman codes of a …\nProvides temporary <code>BitReader</code> in the same endianness.\nThrows away all unread bit values until the next whole …\nExample\nReturns true if the stream is aligned at a whole byte.\nExample\nIf stream is byte-aligned, provides temporary <code>ByteReader</code> …\nWraps a BitReader around something that implements <code>Read</code> …\nWraps a ByteReader around something that implements <code>Read</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse Self from reader\nParse Self from reader with the given context\nParse Self from reader\nParse Self from reader\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>ByteReader</code> to <code>BitReader</code> in the same endianness.\nConverts <code>BitReader</code> to <code>ByteReader</code> in the same endianness.\nUnwraps internal reader and disposes of BitReader.\nUnwraps internal reader and disposes of <code>ByteReader</code>.\nConsumes reader and returns any un-read partial byte as a …\nWraps a BitReader around something that implements <code>Read</code>\nWraps a ByteReader around something that implements <code>Read</code>\nParses and returns complex type\nParses and returns complex type\nParses and returns complex type with context\nParses and returns complex type with context\nExample\nReads an unsigned value from the stream with the given …\nReads whole numeric value from stream\nExamples\nReads whole numeric value from stream in a potentially …\nReads whole value from the stream whose size in bits is …\nReads a single bit from the stream. <code>true</code> indicates 1, <code>false</code>…\nExamples\nCompletely fills the given buffer with whole bytes. If the …\nCompletely fills the given buffer with whole bytes.\nExample\nGiven a compiled Huffman tree, reads bits from the stream …\nExample\nReads an unsigned value from the stream with the given …\nExamples\nReads a twos-complement signed value from the stream with …\nExamples\nReads a twos-complement signed value from the stream with …\nExamples\nReads whole value from the stream whose size in bits is …\nCompletely fills a whole buffer with bytes and returns it. …\nCompletely fills a whole buffer with bytes and returns it.\nCompletely fills a vector of bytes and returns it. If the …\nCompletely fills a vector of bytes and returns it.\nCounts the number of 1 bits in the stream until the next 0 …\nExamples\nCounts the number of 0 bits in the stream until the next 1 …\nExamples\nIf stream is byte-aligned, provides mutable reference to …\nProvides mutable reference to internal reader\nReturns mutable reference to underlying reader\nExample\nSkips the given number of bits in the stream. Since this …\nSkips the given number of bytes in the stream.\nExamples\nFor counting the number of bits written but generating no …\nFor recording writes in order to play them back on another …\nA trait for anything that can write a variable number of …\nFor writing bit values to an underlying stream in a given …\nA trait for anything that can write aligned values to an …\nFor writing aligned bytes to a stream of bytes in a given …\nSome context to use when writing\nSome context to use when writing\nError generated during building, such as <code>io::Error</code>\nError generated during building, such as <code>io::Error</code>\nError generated during building, such as <code>io::Error</code>\nError generated during building, such as <code>io::Error</code>\nA trait for anything that can write Huffman codes of a …\nA generic signed value for stream recording purposes\nImplemented by complex types that don’t require any …\nImplemented by complex types that require additional …\nImplemented by complex types that don’t require any …\nImplemented by complex types that require additional …\nA generic unsigned value for stream recording purposes\nProvides temporary <code>BitWriter</code> in the same endianness.\nBuilds and writes complex type\nBuilds and writes complex type\nBuilds and writes complex type with context\nBuilds and writes complex type with context\nPads the stream with 0 bits until it is aligned at a whole …\nReturns true if the stream is aligned at a whole byte.\nExample\nIf stream is byte-aligned, provides temporary <code>ByteWriter</code> …\nWraps a BitWriter around something that implements <code>Write</code> …\nWraps a BitWriter around something that implements <code>Write</code> …\nCreates new recorder with the given endianness\nFlushes output stream to disk, if necessary. Any partial …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>ByteWriter</code> to <code>BitWriter</code> in the same endianness.\nConverts <code>BitWriter</code> to <code>ByteWriter</code> in the same endianness.\nConsumes writer and returns any un-written partial byte as …\nUnwraps internal writer and disposes of BitWriter.\nUnwraps internal writer and disposes of <code>ByteWriter</code>. Any …\nWraps a BitWriter around something that implements <code>Write</code>\nWraps a ByteWriter around something that implements <code>Write</code>\nCreates new counter\nCreates new recorder\nPlays recorded writes to the given writer\nGenerate self to writer\nGenerate self to writer\nGenerate self to writer\nGenerate self to writer\nCreates new recorder sized for the given number of writes\nWrites an unsigned value to the stream using the given …\nWrites whole numeric value to stream\nExamples\nWrites whole numeric value to stream in a potentially …\nWrites whole value to the stream whose size in bits is …\nWrites a single bit to the stream. <code>true</code> indicates 1, <code>false</code> …\nExamples\nWrites the entirety of a byte buffer to the stream.\nWrites the entirety of a byte buffer to the stream.\nWrites whole value to the stream whose size in bits is …\nWrites Huffman code for the given symbol to the stream.\nExample\nExamples\nWrites an unsigned value to the stream using the given …\nWrites a twos-complement signed value to the stream with …\nExamples\nWrites a twos-complement signed value to the stream with …\nExamples\nWrites <code>value</code> number of 1 bits to the stream and then …\nWrites <code>value</code> number of 0 bits to the stream and then …\nIf stream is byte-aligned, provides mutable reference to …\nProvides mutable reference to internal writer.\nReturns mutable reference to underlying writer\nReturns number of bits written\nReturns number of bits written")