searchState.loadedDescShard("sts", 0, "The GLFW application implementation.\nAdd context to an anyhow error which includes a formatted …\nImplementations of this trait can be run with app_main to …\nA helper for toggling fullscreen on a glfw window.\nThe entrypoint for implementations of the App trait.\nReturns the argument unchanged.\nHandles a single GLFW event.\nCalls <code>U::from(self)</code>.\nCreates a new instance of the application. The application …\nCreate a new fullscreen toggle helper.\nSwitch to fullscreen if windowed, switch back to windowed …\nCalled in a loop after all pending events have been …\nRender a single fullscreen quad using the provided …\nWatches a shader source file and recompiles it with <code>slangc</code>.\nA Texture is a Vulkan Image paired with backing GPU memory …\nResponsible for loading textures from files into usable …\nCreates a new fullscreen quad that uses the provided …\nCreate an instance of <code>Texture</code> using the builder syntax\nChecks for an updated copy of the compiled source code.\nReturns the most up-to-date copy of the shader’s …\nUpdate the frame’s data and add draw commands to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA non-owning handle for the underlying Vulkan image …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA non-owning handle for the underlying GPU memory.\nCreates a new recompiler that attempts to compile the …\nCreates the texture loader and underlying resources.\nRebuilds the graphics pipeline using the provided fragment …\nA non-owning handle for the underlying Vulkan image view.\nA Vulkan device memory allocator.\nAllocators return blocks of memory that can be used for …\nThe Vulkan device is the logical handle for all Vulkan …\nIndicates that the frame is started.\nAll of the synchronization primitives required to manage …\nThe logical Vulkan instance.\nA block allocation that frees itself when dropped.\nAll Vulkan resources related to the Swapchain - images, …\nIndicates that the swapchain needs to be rebuilt.\nA utility for synchronously submitting commands to the GPU.\nA CPU accessible buffer with some convenience functions …\nAllocates a new buffer and GPU memory for holding …\nCreates a buffer and allocates memory to back it.\nCreates an image and allocates memory to back it.\nAllocates device memory according to the given …\nThe device memory allocator.\nReturns a non-owning copy of the Vulkan buffer handle.\nCreate a new Vulkan instance for the given GLFW window.\nGet the total number of configured frames in flight.\nFree the allocated block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe graphics queue supports GRAPHICS and presentation …\nThe queue family index for the graphics + present queue.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true when self is entirely contained by other, …\nReturns the memory-mapped pointer for the DeviceMemory.\nGets a non-owning copy of the underlying DeviceMemory …\nReturns the memory type index for the Block’s device …\nCreate a new Vulkan instance.\nReturns the start of the block as a byte offset into …\nReturns the byte-offset into the buffer for the …\nRAII wrappers for Vulkan objects.\nReturns the size of the block in bytes.\nStarts the next frame in flight.\nReturns a subregion of the current Block.\nUpdates GPU memory with the provided data for the current …\nWrites data into the GPU memory at the given index.\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nA RAII wrapper for the Vulkan Logical Device.\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nA RAII wrapper for the ash library entry and instance that …\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nRAII wrapper that destroys itself when Dropped.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")