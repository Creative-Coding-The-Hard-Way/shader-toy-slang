searchState.loadedDescShard("notify_debouncer_full", 0, "A debouncer for notify that is optimized for ease of use.\nThe set of requirements for watcher debounce event …\nA result of debounced events. Comes with either a vec of …\nA debounced event is emitted after a short delay.\nDebouncer guard, stops the debouncer on drop.\nContains the error value\nThe interface of a file ID cache.\nA cache to hold the file system IDs of all watched files.\nAn implementation of the <code>FileIdCache</code> trait that doesn’t …\nContains the success value\nAdd a new path to the cache or update its value.\nAdd a path to the cache.\nAccess to the internally used notify Watcher backend\nGet a <code>FileId</code> from the cache for a given <code>path</code>.\nThe original event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles an event.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct an empty cache.\nShort function to create a new debounced watcher with the …\nCreates a new debounced watcher with custom configuration.\nRemove a path from the cache.\nRemove a path form the cache.\nRe-scan all paths.\nStop the debouncer, waits for the event thread to finish. …\nStop the debouncer, does not wait for the event thread to …\nThe time at which the event occurred.\nAccess to the internally used notify Watcher backend")