searchState.loadedDescShard("aligned_vec", 0, "aligned-vec\nAligned box. See <code>Box</code> for more info.\nAligned vector. See <code>Vec</code> for more info.\nTrait for types that wrap an alignment value.\nType wrapping a compile-time alignment value.\nType wrapping a runtime alignment value.\nTakes a minimum valid alignment, and returns an alignment …\nReturns the alignment of the vector.\nReturns the alignment of the box.\nReturns a mutable pointer to the objects held by the …\nReturns a mutable reference to a slice over the objects …\nReturns a pointer to the objects held by the vector.\nReturns a reference to a slice over the objects held by …\nCreate a vector that is aligned to a cache line boundary.\nCreate a vector that is aligned to a runtime alignment …\nReturns the number of elements the vector can hold without …\nDrops the all the elements of the vector, setting its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCollects an iterator into an <code>AVec&lt;T&gt;</code> with the provided …\nReturns a new <code>AVec&lt;T&gt;</code> from its raw parts.\nCreates a new <code>ABox&lt;T&gt;</code> from its raw parts.\nCollects a slice into an <code>AVec&lt;T&gt;</code> with the provided …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>ABox&lt;T&gt;</code>. This will drop any …\nDecomposes an <code>AVec&lt;T&gt;</code> into its raw parts: …\nDecomposes a <code>ABox&lt;T&gt;</code> into its raw parts: <code>(ptr, alignment)</code>.\nReturns <code>true</code> if the vector’s length is equal to <code>0</code>, and …\nReturns the length of the vector.\nTakes an alignment value and a minimum valid alignment, …\nReturns a new <code>AVec&lt;T&gt;</code> with the provided alignment.\nCreates a new <code>ABox&lt;T&gt;</code> containing <code>value</code> at an address …\nRemove the last value from the vector if it exists, …\nPush the given value to the end of the vector, …\nReserves enough capacity for at least <code>additional</code> more …\nReserves enough capacity for exactly <code>additional</code> more …\nShrinks the capacity of the vector with a lower bound. The …\nShrinks the capacity of the vector as much as possible …\nDrops the last elements of the vector until its length is …\nCreates a new empty vector with enough capacity for at …")